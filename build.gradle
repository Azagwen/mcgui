import net.fabricmc.loom.task.RemapJarTask


plugins {
    id 'fabric-loom' version '0.6-SNAPSHOT'
    id 'maven-publish'
}

apply plugin: "java"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "AperLambda"
        url = 'https://aperlambda.github.io/maven'
    }
    maven { url = "https://jitpack.io" }
}

configurations {
    shadow
    api.extendsFrom shadow
}

dependencies {

    // FabricMC Core
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // SpruceUI
    modImplementation "com.github.LambdAurora:SpruceUI:1.16wip-SNAPSHOT"
    include "com.github.LambdAurora:SpruceUI:1.16wip-SNAPSHOT"
    include "org.reflections:reflections:0.9.12"

    shadow ("org.aperlambda:lambdajcommon:1.8.1") {
        // Minecraft already has all the google dependencies.
        exclude group: 'com.google.code.gson'
        exclude group: 'com.google.guava'
    }

    implementation fileTree(dir: 'libs', include: '*.jar')

}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task shadowJar(type: Jar) {
    archiveClassifier.set("dev")

    from sourceSets.main.output

    from {
        configurations.shadow.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task shadowRemapJar(type: RemapJarTask) {
    dependsOn shadowJar

    input = file("${project.buildDir}/libs/$archivesBaseName-$version-dev.jar")
    archiveName = "${archivesBaseName}-${version}.jar"
    addNestedDependencies = true
}

jar {
    from "LICENSE"
}

publishing {
    publications {
        publishFalsemaven(MavenPublication) {
            artifactId = project.artifactId
            pom {
                name = "McGUI"
                description = "A GUI library for fabric. Simple HTML like syntax and easy to use. "
                url = "https://mcgui.cf"
                licenses {
                    license {
                        name = "Mozilla Public License 2.0"
                        url = "https://github.com/diabolical17/mcgui/blob/1.16/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "calum6541"
                        name = "calum6541/diabolical17"
                        email = "calumproh28@gmail.com"
                    }
                }
                scm {
                    url = "https://github.com/diabolical17/mcgui"
                }
            }
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        maven {
            name "falsemaven"
            url "https://maven.falseresync.ru/releases"
            credentials {
                InputStreamReader r = new InputStreamReader(System.in);
                BufferedReader br = new BufferedReader(r);
                System.out.println("Username?")
                username = br.readLine()
                System.out.println("Password?")
                password = br.readLine()
            }
        }
    }
}